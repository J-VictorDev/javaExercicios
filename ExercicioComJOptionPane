
package exercicio;


import java.util.Random;
import javax.swing.JOptionPane;

public class Exercicio {

    
    public static void main(String[] args) {
        int opcao;
        do {
            opcao = Integer.parseInt(JOptionPane.showInputDialog(
                    "Menu de opções\n" +
                    "\n" +
                    "1 - Preencher matriz.\n" +
                    "2 - Encontrar maior valor.\n" +
                    "3 - Encontrar menor valor\n" +
                    "4 - Calcular soma dos elementos\n" +
                    "5 - Calcular média dos elementos\n" +
                    "6 - Apresentar elemento por posição\n" +
                    "7 - Apresentar elemento da diagonal primária\n" +
                    "8 - Apresentar elemento da diagonal secundária\n" +
                    "9 - Apresentar elementos impares da matriz\n" +
                    "10 - Sair"));
          
            switch (opcao){
                case 1: preencherVetor();
                break;
                case 2: maiorValor();
                break;
                case 3: menorValor();
                break;
                case 4: calcSoma();
                break;
                case 5: calcMedia();
                break;
                case 6: elementoPosicao();
                break;
                case 7: diagPrimaria();
                break;
                case 8: diagSecundaria();
                break;
                case 9: elemImpares();
                break;
                case 10: JOptionPane.showMessageDialog(null, "Fim do programa");
                break;
                default: JOptionPane.showMessageDialog(null, "opção invalida");
            }
        }while(opcao !=10);
        
    }

    private static void preencherVetor() {
    int matriz[][] = new int[5][5];
    Random random = new Random();
    int i=0,j=0;
        for (i=0; i<5;i++){
            for(j=0; j<5;j++){
            matriz[i][j] = random.nextInt(20);
            JOptionPane.showMessageDialog(null, 
                "Elemento " + i + "-" + j + " da matriz: " + matriz[i][j]);
            }
    }
    }

    private static void maiorValor() {
        
        
    }

    private static void menorValor() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static void calcSoma() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static void calcMedia() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static void elementoPosicao() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static void diagPrimaria() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static void diagSecundaria() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static void elemImpares() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
